/**
 * \file
 * \brief AligningBlockDevice test cases
 *
 * This test checks whether AligningBlockDevice perform all operations properly and in correct order.
 *
 * \author Copyright (C) 2019 Kamil Szczygiel http://www.distortec.com http://www.freddiechopin.info
 *
 * \par License
 * This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0. If a copy of the MPL was not
 * distributed with this file, You can obtain one at http://mozilla.org/MPL/2.0/.
 */

#include "unit-test-common.hpp"

#include "distortos/devices/memory/AligningBlockDevice.hpp"

using trompeloeil::_;

namespace
{

/*---------------------------------------------------------------------------------------------------------------------+
| local types
+---------------------------------------------------------------------------------------------------------------------*/

class BlockDevice : public distortos::devices::BlockDevice
{
public:

	MAKE_MOCK0(close, int());
	MAKE_MOCK2(erase, int(uint64_t, uint64_t));
	MAKE_CONST_MOCK0(getBlockSize, size_t());
	MAKE_CONST_MOCK0(getSize, uint64_t());
	MAKE_MOCK0(lock, void());
	MAKE_MOCK0(open, int());
	MAKE_MOCK3(read, int(uint64_t, void*, size_t));
	MAKE_MOCK0(synchronize, int());
	MAKE_MOCK0(unlock, void());
	MAKE_MOCK3(write, int(uint64_t, const void*, size_t));
};

/*---------------------------------------------------------------------------------------------------------------------+
| local objects
+---------------------------------------------------------------------------------------------------------------------*/

constexpr size_t alignment {DISTORTOS_BLOCKDEVICE_BUFFER_ALIGNMENT};
constexpr size_t blockSize {512};
constexpr uint64_t deviceSize {UINT64_MAX};
const uint8_t randomData[]
{
		0xcb, 0xa1, 0x47, 0x5f, 0x19, 0xda, 0xdd, 0x82, 0x4d, 0x50, 0x8e, 0xff, 0xf4, 0xcc, 0x0d, 0xca,
		0xd0, 0x99, 0x8b, 0x96, 0xd7, 0x64, 0x1d, 0x84, 0xaf, 0x41, 0x45, 0x5e, 0xb6, 0xe2, 0x77, 0xf7,
		0xef, 0x63, 0xde, 0x72, 0xff, 0x24, 0x54, 0xc6, 0xd7, 0xf3, 0xf9, 0x7d, 0x25, 0x49, 0x58, 0xc0,
		0x03, 0x9c, 0xea, 0x36, 0x57, 0xee, 0x14, 0x82, 0x56, 0xf5, 0xf0, 0x8a, 0x00, 0x3b, 0xb9, 0x28,
		0x64, 0x85, 0x3f, 0x46, 0x45, 0xb6, 0xab, 0xed, 0x41, 0x29, 0xd5, 0x05, 0x7b, 0xe9, 0x01, 0xbb,
		0x0a, 0x5f, 0x8d, 0x8e, 0x7d, 0x24, 0x79, 0x34, 0xd1, 0x80, 0x8e, 0x5d, 0x0a, 0xb5, 0x69, 0xa7,
		0xe9, 0x03, 0x3e, 0x5c, 0xdc, 0x5a, 0x81, 0xae, 0x63, 0x0f, 0xdb, 0x5d, 0x7f, 0x16, 0xaf, 0xf3,
		0x49, 0x40, 0x22, 0xb3, 0x09, 0x49, 0xfd, 0xb0, 0xa6, 0xb5, 0xa1, 0xc7, 0x41, 0x55, 0xa2, 0xa0,
		0x2f, 0x35, 0x19, 0x55, 0x92, 0xad, 0x26, 0xf7, 0x35, 0xc6, 0xd2, 0x59, 0x19, 0x9a, 0x6f, 0x88,
		0x5b, 0x2a, 0x1f, 0x64, 0xa8, 0xa7, 0xf2, 0x12, 0xd5, 0x56, 0xa3, 0x48, 0xa0, 0xef, 0xf2, 0x9d,
		0x43, 0x86, 0x8d, 0x78, 0x9f, 0xd5, 0x34, 0x39, 0x8c, 0xb1, 0xde, 0x4d, 0x29, 0xb1, 0x72, 0xf8,
		0x05, 0x5a, 0x78, 0x9e, 0x19, 0xc5, 0xd6, 0x4a, 0xd8, 0x67, 0xd1, 0x9d, 0xff, 0xc2, 0x2b, 0x45,
		0x44, 0xcd, 0xad, 0x66, 0x75, 0x96, 0xef, 0xca, 0x4b, 0x52, 0x71, 0xb8, 0xcf, 0xed, 0x15, 0x07,
		0x4d, 0xc6, 0xc7, 0xaf, 0x24, 0x6e, 0xb8, 0x17, 0xb2, 0xc9, 0x7f, 0xf3, 0xd7, 0x94, 0x76, 0xb5,
		0x6e, 0x5c, 0x7a, 0x87, 0x88, 0x9a, 0x85, 0x76, 0xd5, 0x2b, 0xb9, 0x67, 0xa5, 0xc0, 0x0d, 0xe7,
		0xca, 0x65, 0x43, 0xa5, 0xa0, 0xda, 0x31, 0x4e, 0xe2, 0xe8, 0x77, 0x46, 0x19, 0xf8, 0x90, 0x10,
		0x55, 0x0b, 0x93, 0xe4, 0x4b, 0x10, 0x99, 0x48, 0x60, 0xfa, 0xc6, 0x1d, 0xc3, 0x7b, 0x18, 0x33,
		0x72, 0xf5, 0x79, 0x55, 0x9c, 0x8f, 0x5e, 0xd6, 0x38, 0x17, 0x03, 0xf2, 0x75, 0xbc, 0xa3, 0xcb,
		0xbe, 0x82, 0x2f, 0xe7, 0x18, 0xef, 0x5d, 0x8b, 0x34, 0x64, 0x6d, 0xd0, 0xa4, 0xb6, 0xab, 0xff,
		0x2c, 0x0a, 0xa6, 0xd2, 0x25, 0xde, 0x45, 0x3e, 0xe5, 0xf9, 0x0d, 0x89, 0xf4, 0xae, 0x3a, 0xc8,
		0x92, 0xa2, 0xd9, 0x81, 0xd8, 0x34, 0xaa, 0x48, 0x09, 0x54, 0x73, 0xef, 0x72, 0x36, 0xf7, 0xd3,
		0x9d, 0x49, 0x4e, 0x69, 0xa6, 0xa6, 0xfd, 0x25, 0x35, 0x10, 0x4f, 0x31, 0x1e, 0xa0, 0xd7, 0x29,
		0x80, 0xea, 0x13, 0xde, 0x9a, 0x7d, 0x6a, 0x70, 0x9e, 0xb7, 0x26, 0x16, 0xf2, 0x55, 0x7d, 0xaf,
		0x24, 0xbf, 0x02, 0xff, 0x99, 0x15, 0xb1, 0x97, 0x1f, 0x16, 0x7d, 0x1b, 0x45, 0xbf, 0x59, 0xe6,
		0x2e, 0x24, 0x19, 0x83, 0xef, 0x5b, 0x2a, 0x00, 0xff, 0x26, 0xd4, 0xd4, 0xaa, 0x57, 0xfe, 0x59,
		0x3f, 0x4f, 0x23, 0x81, 0x97, 0x59, 0x9c, 0x69, 0xc8, 0x3b, 0xf4, 0xc7, 0x92, 0x79, 0xcf, 0x3c,
		0xa1, 0x3c, 0x68, 0xd9, 0x46, 0x7b, 0xb1, 0x8a, 0xe4, 0x2e, 0x59, 0x90, 0xe9, 0xcf, 0x5b, 0x0c,
		0x3c, 0xff, 0xdf, 0x3c, 0xc6, 0xb2, 0x7e, 0x9c, 0x51, 0xdd, 0xc1, 0x74, 0x62, 0xc6, 0x6f, 0x02,
		0xb8, 0x5f, 0x01, 0xd0, 0xad, 0xcc, 0x52, 0xf9, 0x16, 0x45, 0x0b, 0x51, 0x3e, 0x0a, 0x36, 0x66,
		0x24, 0xce, 0x32, 0xab, 0x8d, 0xc7, 0xdc, 0x98, 0x9e, 0xb5, 0x26, 0xc2, 0x95, 0xa9, 0xc7, 0xf0,
		0xa1, 0x87, 0x94, 0x76, 0x44, 0xc0, 0xbb, 0x29, 0x66, 0x09, 0x54, 0x42, 0x42, 0xf8, 0xce, 0xad,
		0xdc, 0x84, 0x96, 0x2b, 0xda, 0x18, 0xf0, 0x34, 0xf7, 0xa9, 0x67, 0xcc, 0x98, 0x2a, 0x1e, 0x58,
		0xe2, 0xf0, 0xe0, 0xa0, 0x9d, 0x24, 0xda, 0x78, 0x0d, 0x2c, 0x2d, 0xbe, 0x6a, 0x45, 0xbd, 0xb5,
		0x81, 0x9c, 0xbc, 0x8c, 0x55, 0xe7, 0x56, 0x32, 0xd3, 0xb0, 0xf3, 0xbd, 0x9a, 0x53, 0xfa, 0x63,
		0x28, 0xe9, 0x11, 0x88, 0xa1, 0x13, 0x5b, 0x5d, 0x41, 0x0e, 0x1d, 0x8d, 0xca, 0xab, 0x7c, 0xf5,
		0x0d, 0xc0, 0xe0, 0x99, 0xe9, 0x49, 0xc9, 0x49, 0xc0, 0xa2, 0xef, 0x96, 0x31, 0xd2, 0x04, 0x63,
		0xdd, 0xb0, 0xb1, 0x8f, 0x12, 0x3c, 0x55, 0x22, 0xb2, 0x3e, 0x27, 0x96, 0xfb, 0x05, 0x75, 0x3d,
		0xc1, 0x3a, 0x62, 0x84, 0x72, 0x63, 0xe3, 0x72, 0xe8, 0x7f, 0xb4, 0x34, 0xc0, 0x8d, 0x07, 0xc5,
		0x04, 0xac, 0xef, 0x8e, 0x1f, 0x89, 0xfd, 0x6f, 0xea, 0x3a, 0x89, 0xd8, 0x66, 0xec, 0x16, 0xba,
		0x20, 0x4f, 0x5c, 0xcb, 0xd2, 0x8f, 0xf6, 0xa3, 0x4d, 0xb8, 0xad, 0xf8, 0x71, 0xe0, 0x95, 0x1f,
		0x09, 0xc4, 0x0a, 0x43, 0x05, 0x15, 0xf0, 0x91, 0x75, 0x69, 0x4a, 0x5f, 0x9d, 0xfd, 0x7d, 0xc2,
		0x11, 0x53, 0xd9, 0x98, 0x75, 0xa2, 0x0a, 0xf8, 0x6d, 0x7e, 0x5a, 0x89, 0xe8, 0x13, 0x4b, 0x50,
		0x19, 0x2d, 0x55, 0xf5, 0x29, 0x87, 0xb0, 0x43, 0x4d, 0xd1, 0xec, 0x1b, 0x26, 0xe5, 0x77, 0x1b,
		0x24, 0xae, 0x84, 0xce, 0xc2, 0xae, 0xb9, 0xd2, 0xdb, 0xd1, 0x76, 0xe8, 0x1d, 0x6b, 0xec, 0x76,
		0x8d, 0xf2, 0x71, 0xd7, 0x5d, 0x1f, 0xd5, 0x8f, 0xa0, 0x5a, 0x02, 0x2f, 0x39, 0x45, 0x8f, 0x33,
		0x7a, 0x9a, 0x3a, 0x20, 0xb7, 0xb1, 0x10, 0x21, 0x6a, 0x79, 0x40, 0x25, 0xc4, 0x79, 0xc2, 0x18,
		0x90, 0x04, 0x48, 0x96, 0x29, 0xd9, 0xb9, 0xe1, 0x65, 0x4a, 0x2e, 0x62, 0x81, 0x48, 0x7e, 0xd9,
		0xbd, 0x72, 0x49, 0x0a, 0xfc, 0xf2, 0x41, 0x4e, 0x54, 0xfc, 0xa4, 0xa9, 0x45, 0xf7, 0xd8, 0x3a,
		0xf8, 0xdb, 0x0c, 0x20, 0xa2, 0x16, 0x2a, 0x1a, 0x41, 0x8f, 0xd6, 0x8e, 0x58, 0x32, 0x84, 0x4b,
		0x5d, 0x2d, 0x82, 0xd5, 0x35, 0x2f, 0xa6, 0x63, 0x4d, 0x8d, 0xa4, 0x47, 0x8d, 0xd1, 0x35, 0x19,
		0x31, 0x58, 0x90, 0x4b, 0xa5, 0x19, 0x35, 0xe9, 0xd2, 0xf2, 0x04, 0x6b, 0x73, 0xa8, 0x24, 0xda,
		0xd8, 0xe0, 0x24, 0x6d, 0xee, 0x96, 0x17, 0xff, 0x2c, 0x9f, 0xf9, 0xb5, 0x03, 0x61, 0xa4, 0x5c,
		0xbd, 0x79, 0xf4, 0x1d, 0x7f, 0x20, 0x22, 0x47, 0x48, 0x64, 0x49, 0x9f, 0xf9, 0x10, 0x84, 0xfe,
		0x52, 0x6d, 0x6e, 0x23, 0x32, 0x6d, 0x73, 0xdb, 0x5b, 0x53, 0xf2, 0x6f, 0xb3, 0x2c, 0x52, 0x27,
		0x34, 0x20, 0x88, 0x86, 0xd4, 0x3d, 0x7e, 0xc6, 0x27, 0x54, 0x6d, 0x07, 0x6b, 0x95, 0x29, 0xa7,
		0x75, 0xff, 0x64, 0xbc, 0x3a, 0x8e, 0x69, 0x89, 0x88, 0x86, 0x2a, 0x91, 0x0e, 0xa3, 0xe3, 0xd7,
		0x0c, 0xd7, 0xdd, 0x85, 0x5f, 0x34, 0x84, 0x27, 0x97, 0x6b, 0x09, 0x54, 0x7b, 0x6f, 0x63, 0x32,
		0x1e, 0x3b, 0x30, 0xee, 0xe3, 0x03, 0xf3, 0xb7, 0x78, 0x51, 0xca, 0xf6, 0x37, 0x11, 0xee, 0x23,
		0x88, 0xe8, 0x74, 0x05, 0x9b, 0x45, 0x5d, 0x2e, 0x2a, 0x60, 0xba, 0x61, 0x38, 0x12, 0x87, 0x2d,
		0xf8, 0x06, 0x9d, 0xba, 0x17, 0x59, 0x39, 0xd5, 0x66, 0x0f, 0x11, 0x00, 0xe5, 0x6b, 0xbe, 0xe5,
		0x8d, 0x26, 0x00, 0xd9, 0x34, 0xbd, 0x86, 0x1d, 0x4c, 0xf1, 0xbe, 0x9b, 0xe6, 0xf6, 0xce, 0x53,
		0x8b, 0xd2, 0x4d, 0x45, 0x1d, 0xca, 0x90, 0x51, 0x2f, 0x07, 0x40, 0x30, 0xb8, 0x52, 0xe7, 0x6b,
		0x3d, 0x17, 0xc7, 0xdb, 0xe8, 0x10, 0xbe, 0xa2, 0x26, 0xaf, 0xcc, 0xc4, 0xc5, 0x5e, 0xc8, 0x81,
		0x81, 0xfc, 0xee, 0x0b, 0x4e, 0x97, 0xe8, 0x62, 0x98, 0xf2, 0x46, 0x6e, 0x19, 0xc9, 0x91, 0x79,
		0x87, 0xcd, 0xa2, 0x9f, 0xdd, 0x6e, 0x26, 0x42, 0x6b, 0x1e, 0xb0, 0xb2, 0xd2, 0x3a, 0x5c, 0x55,
		0xdc, 0xea, 0x91, 0x9b, 0x6d, 0x52, 0x7b, 0x0b, 0x43, 0xa1, 0xf7, 0x47, 0xa2, 0xeb, 0xc5, 0x95,
		0x95, 0x80, 0x9a, 0xe6, 0x8f, 0x9b, 0x70, 0x50, 0xd2, 0x6c, 0xf0, 0x3e, 0x4d, 0x65, 0x84, 0x50,
		0x50, 0xdd, 0xf4, 0x10, 0x50, 0xd7, 0xfe, 0x75, 0xf9, 0x3e, 0xd7, 0xb4, 0x85, 0xe5, 0x04, 0x4a,
		0x5f, 0x24, 0xaa, 0x65, 0x02, 0x95, 0x32, 0x0b, 0x94, 0xa6, 0xcb, 0x9e, 0x07, 0x9f, 0x29, 0xb5,
		0x77, 0x51, 0x27, 0xfb, 0x90, 0xc0, 0x5d, 0xf4, 0x1a, 0x49, 0x72, 0x89, 0x4c, 0x23, 0x42, 0xd6,
		0x3b, 0xba, 0x56, 0x0b, 0x07, 0xe6, 0xec, 0x7a, 0x49, 0x55, 0xcb, 0x0e, 0x5c, 0x7f, 0xe2, 0xfe,
		0x0f, 0x8f, 0x18, 0xd8, 0xd0, 0xaa, 0xcb, 0x18, 0xcb, 0x1d, 0xb9, 0xe1, 0x60, 0xd5, 0x32, 0xba,
		0xb7, 0xf1, 0x71, 0xf7, 0x67, 0xef, 0x78, 0xa2, 0xb4, 0x70, 0x3a, 0xe6, 0x7f, 0x0b, 0x0e, 0x2d,
		0xdc, 0x3a, 0x59, 0xd7, 0xc1, 0x0a, 0xb6, 0xba, 0xcf, 0x9e, 0xa2, 0xc9, 0x02, 0x63, 0x6e, 0x3b,
		0x34, 0x8c, 0x1e, 0xdc, 0x4e, 0x1c, 0xc8, 0xa8, 0x58, 0x60, 0x59, 0x39, 0xa9, 0x3a, 0x45, 0x13,
		0x2d, 0x0b, 0x05, 0x83, 0x14, 0xc2, 0x0d, 0x1e, 0x86, 0x82, 0x27, 0x64, 0xb7, 0xad, 0x3d, 0xf6,
		0x94, 0xb6, 0x15, 0xad, 0xed, 0x4c, 0x10, 0x0a, 0x5e, 0xfc, 0x60, 0x0f, 0x1b, 0x33, 0xf7, 0x40,
		0x62, 0xeb, 0xb8, 0xc0, 0x56, 0xe4, 0x48, 0x8b, 0xfd, 0x0d, 0x54, 0xac, 0x4d, 0x82, 0xc3, 0xad,
		0xd1, 0x34, 0xea, 0xe7, 0x3e, 0xa0, 0x4d, 0x09, 0x82, 0xd0, 0xc9, 0x1c, 0x9d, 0xa2, 0xcf, 0xa4,
		0x71, 0xd3, 0xc6, 0xa5, 0x1f, 0x7e, 0xa7, 0x50, 0x87, 0x68, 0xb2, 0x59, 0xf6, 0xf2, 0x19, 0x22,
		0xa7, 0x0d, 0x07, 0xd6, 0xbe, 0xdb, 0x6c, 0xe4, 0x24, 0x06, 0x9c, 0x9d, 0x57, 0xe0, 0x0f, 0x0d,
		0x7a, 0x03, 0xf3, 0x03, 0x4c, 0x65, 0x41, 0xb0, 0x7a, 0x6b, 0x92, 0x2d, 0xed, 0x8a, 0xc0, 0x84,
		0x32, 0xec, 0xa5, 0xdd, 0xea, 0x5a, 0xde, 0x1c, 0x3d, 0xf3, 0x2a, 0x30, 0x42, 0x6a, 0x90, 0x2d,
		0x9b, 0xf7, 0xea, 0x18, 0x1f, 0x20, 0x14, 0x2d, 0xe6, 0xa0, 0x2a, 0xf4, 0x71, 0x57, 0xa8, 0x48,
		0x2e, 0x7d, 0x52, 0xc1, 0x65, 0x96, 0x4a, 0x5b, 0xa8, 0xca, 0x15, 0xba, 0xfd, 0x09, 0xff, 0x13,
		0x43, 0x8d, 0x8b, 0xd1, 0x07, 0xfc, 0x3b, 0x85, 0x90, 0xe7, 0x03, 0xa1, 0x64, 0x09, 0xf2, 0xd5,
		0x0b, 0x42, 0x08, 0x3c, 0x91, 0x92, 0x1f, 0xf0, 0xd5, 0xc7, 0xaa, 0x4e, 0x78, 0x67, 0xfb, 0xe6,
		0xc2, 0xf7, 0x57, 0x94, 0x4a, 0x56, 0xe5, 0x4e, 0x40, 0x9d, 0x4a, 0x8c, 0x2a, 0x34, 0x3f, 0x97,
		0xf7, 0x69, 0xcf, 0xf8, 0x0f, 0x62, 0x07, 0x79, 0x86, 0xc8, 0xaf, 0x6e, 0x85, 0x71, 0x4c, 0x3f,
		0x61, 0x9c, 0xdd, 0x55, 0x86, 0x63, 0x38, 0x95, 0x7b, 0x5c, 0x86, 0x34, 0x8f, 0xde, 0x34, 0x23,
		0xc7, 0x5c, 0xd2, 0x9d, 0x7c, 0xf6, 0x16, 0x34, 0x39, 0xf7, 0x18, 0x8d, 0x38, 0x94, 0xa6, 0x15,
		0x1b, 0x3f, 0xfc, 0xca, 0x49, 0x12, 0xf8, 0x07, 0x4c, 0x09, 0x65, 0x38, 0x22, 0x57, 0x9b, 0xe9,
		0xba, 0x7f, 0x9f, 0x43, 0x11, 0xe7, 0x32, 0x44, 0x5c, 0x0f, 0xfe, 0xb9, 0xb1, 0x7c, 0x45, 0x1f,
		0xa2, 0x97, 0x35, 0x24, 0x9f, 0x5e, 0x45, 0x3f, 0x01, 0x18, 0xc9, 0xaf, 0xe3, 0x1a, 0x0a, 0x9d,
		0xc7, 0xdd, 0x1d, 0xae, 0xd5, 0xa2, 0x24, 0x1f, 0xdc, 0x5d, 0x7b, 0x66, 0x70, 0xb5, 0x8c, 0x4c,
		0x59, 0x50, 0x27, 0x6e, 0x42, 0xf3, 0x9e, 0x1c, 0xec, 0xf5, 0xd5, 0xef, 0xf4, 0x87, 0x5d, 0x87,
		0x69, 0x65, 0x88, 0xd4, 0xb4, 0xf2, 0x3e, 0x73, 0x4a, 0xf7, 0x17, 0xf5, 0x83, 0x1e, 0x1b, 0x06,
		0x54, 0x81, 0x5a, 0xa4, 0xd4, 0x5d, 0x03, 0x6f, 0x89, 0xb3, 0x32, 0x2e, 0xfb, 0xdd, 0xe4, 0xc1,
		0xc9, 0x3f, 0x71, 0x39, 0x7c, 0x8a, 0x09, 0xdb, 0x23, 0x94, 0x4a, 0x90, 0x87, 0xc4, 0x8f, 0x7a,
		0x71, 0xfb, 0x17, 0x4c, 0x2d, 0x42, 0x52, 0xc0, 0xcc, 0x1d, 0xac, 0x38, 0x30, 0x24, 0xa2, 0x8a,
		0xad, 0x56, 0x08, 0x8b, 0x28, 0xeb, 0xd1, 0x7a, 0xf8, 0xe0, 0xca, 0x48, 0x35, 0x98, 0x56, 0x3c,
		0x30, 0x89, 0x38, 0x24, 0x61, 0x54, 0x4c, 0x56, 0x81, 0x45, 0xfa, 0x8e, 0xa6, 0xf8, 0xe1, 0xda,
		0x0b, 0x8b, 0x32, 0xe3, 0x7d, 0xba, 0x49, 0xf8, 0x5d, 0x99, 0x60, 0x9d, 0xef, 0x18, 0xf1, 0x97,
		0x78, 0xa1, 0xbe, 0x2e, 0x6c, 0x9d, 0xf5, 0x1b, 0x33, 0x59, 0x5a, 0xb9, 0x60, 0x73, 0xec, 0x4e,
		0xac, 0x53, 0x16, 0x87, 0x3d, 0x4f, 0x7b, 0xcb, 0xb1, 0x82, 0xf8, 0xeb, 0xb6, 0x91, 0x84, 0x4e,
		0xda, 0x19, 0xeb, 0xde, 0x95, 0x49, 0x1e, 0xfa, 0xca, 0x99, 0x6a, 0x8f, 0xa6, 0x05, 0x8d, 0x7b,
		0xa7, 0x29, 0x7a, 0xb5, 0x2a, 0xa3, 0x81, 0xfd, 0x3e, 0x53, 0xca, 0x27, 0x4c, 0x04, 0x1d, 0xa6,
		0x7e, 0xfe, 0xb9, 0xc3, 0x56, 0xb6, 0x2d, 0x60, 0x6e, 0x3b, 0x53, 0x7a, 0x2e, 0x83, 0x2f, 0x7e,
		0x27, 0xb4, 0x59, 0x56, 0xe8, 0x7d, 0x1d, 0xae, 0xef, 0x8e, 0x6f, 0xe9, 0x76, 0xaf, 0x4d, 0xb4,
		0x1f, 0x00, 0x92, 0x90, 0x61, 0x23, 0x97, 0x54, 0xfd, 0x85, 0x58, 0x0d, 0x03, 0xdb, 0x42, 0x90,
		0x59, 0xcf, 0x0a, 0xd8, 0xd1, 0x25, 0x41, 0xb5, 0x9e, 0xab, 0x40, 0x42, 0xfc, 0x94, 0xf0, 0x22,
		0x3a, 0xec, 0x62, 0x0b, 0x45, 0x70, 0x35, 0x3d, 0x59, 0x96, 0x56, 0x1a, 0x4d, 0xdb, 0xdd, 0x3b,
		0x0e, 0x49, 0x44, 0x85, 0x50, 0x72, 0x0a, 0x52, 0xf6, 0xe8, 0x40, 0xc4, 0x01, 0x49, 0xb3, 0xc1,
		0x95, 0xaf, 0x39, 0x86, 0x25, 0x45, 0x96, 0xc6, 0x46, 0xce, 0x5b, 0x80, 0x92, 0x33, 0x37, 0x24,
		0xa0, 0xf5, 0x69, 0xdc, 0x5b, 0x03, 0xc9, 0xfb, 0x8e, 0x37, 0xb0, 0xfd, 0xf6, 0x93, 0xc9, 0xf4,
		0xf0, 0xb2, 0xe9, 0x6f, 0x46, 0x53, 0xba, 0x08, 0xa7, 0xb2, 0x28, 0x6a, 0x19, 0xa5, 0x93, 0x17,
		0x27, 0x44, 0x49, 0x9a, 0xf9, 0x45, 0xe8, 0x3e, 0xee, 0x70, 0x2b, 0x04, 0x49, 0x9d, 0x9f, 0x89,
		0xaa, 0x4b, 0x63, 0x56, 0x7c, 0xb2, 0x2c, 0xd5, 0xda, 0xd1, 0x34, 0x93, 0x56, 0xc5, 0xf6, 0xc2,
		0xf4, 0x03, 0x7e, 0xbf, 0x7b, 0xef, 0xef, 0x42, 0xd6, 0x07, 0x9e, 0x5a, 0xa3, 0x70, 0x0b, 0x46,
		0xb6, 0x0f, 0x60, 0x7e, 0x3d, 0xae, 0x02, 0x95, 0xe8, 0x8d, 0xf4, 0x76, 0x5d, 0x43, 0xda, 0x37,
		0xf1, 0x5b, 0x97, 0x53, 0xf5, 0xdc, 0xac, 0x51, 0xe1, 0xaa, 0xf8, 0xf8, 0x5f, 0xa4, 0x17, 0x69,
		0x73, 0x6b, 0x6d, 0xee, 0x41, 0x63, 0x4f, 0xd2, 0x22, 0xb2, 0x1b, 0x95, 0xdc, 0xe7, 0x28, 0x90,
		0x8e, 0xb2, 0xf3, 0x4e, 0x63, 0x2c, 0x4a, 0x88, 0x86, 0x47, 0x4e, 0xb4, 0x40, 0x61, 0x12, 0x08,
		0xf7, 0x41, 0x05, 0x9c, 0x23, 0x4e, 0x0f, 0x9f, 0xf6, 0xf7, 0x35, 0x9d, 0x3f, 0x4d, 0x65, 0x44,
		0x07, 0xfa, 0xce, 0x13, 0x4b, 0x37, 0xd6, 0xd7, 0xfb, 0x05, 0x0a, 0xd6, 0x25, 0x17, 0x64, 0x1d,
		0xfb, 0x88, 0xb7, 0x97, 0xbf, 0xb3, 0xb6, 0x62, 0x8b, 0x7c, 0x13, 0xcd, 0xb8, 0x7c, 0x20, 0x20,
		0xbd, 0xdb, 0xa6, 0x43, 0x27, 0xbc, 0x1d, 0xe7, 0x7a, 0xf5, 0x27, 0x4e, 0xdb, 0xb3, 0xfe, 0xcb,
		0x3e, 0xd9, 0x40, 0x0b, 0xe6, 0x30, 0x20, 0xb9, 0xba, 0x9e, 0x97, 0x20, 0x5d, 0x5a, 0xae, 0x4c,
};
static_assert(sizeof(randomData) % blockSize == 0);

}	// namespace

/*---------------------------------------------------------------------------------------------------------------------+
| global test cases
+---------------------------------------------------------------------------------------------------------------------*/

TEST_CASE("Testing getBlockSize()", "[getBlockSize]")
{
	BlockDevice blockDeviceMock;
	uint8_t aligningBuffer[blockSize * 2] __attribute__ ((aligned(alignment))) {};
	trompeloeil::sequence sequence {};

	distortos::devices::AligningBlockDevice aligningBlockDevice {blockDeviceMock, aligningBuffer,
			sizeof(aligningBuffer)};

	constexpr size_t anotherBlockSize {0xa61d9f85};
	REQUIRE_CALL(blockDeviceMock, getBlockSize()).IN_SEQUENCE(sequence).RETURN(anotherBlockSize);
	REQUIRE(aligningBlockDevice.getBlockSize() == anotherBlockSize);
}

TEST_CASE("Testing getSize()", "[getSize]")
{
	BlockDevice blockDeviceMock;
	uint8_t aligningBuffer[blockSize * 2] __attribute__ ((aligned(alignment))) {};
	trompeloeil::sequence sequence {};

	distortos::devices::AligningBlockDevice aligningBlockDevice {blockDeviceMock, aligningBuffer,
			sizeof(aligningBuffer)};

	constexpr size_t size {0x5729a11b};
	REQUIRE_CALL(blockDeviceMock, getSize()).IN_SEQUENCE(sequence).RETURN(size);
	REQUIRE(aligningBlockDevice.getSize() == size);
}

TEST_CASE("Testing open() & close()", "[open/close]")
{
	BlockDevice blockDeviceMock;
	uint8_t aligningBuffer[blockSize * 2] __attribute__ ((aligned(alignment))) {};
	trompeloeil::sequence sequence {};

	distortos::devices::AligningBlockDevice aligningBlockDevice {blockDeviceMock, aligningBuffer,
			sizeof(aligningBuffer)};

	SECTION("Block device open error should propagate error code to caller")
	{
		REQUIRE_CALL(blockDeviceMock, lock()).IN_SEQUENCE(sequence);
		constexpr int ret {0x1cd58756};
		REQUIRE_CALL(blockDeviceMock, open()).IN_SEQUENCE(sequence).RETURN(ret);
		REQUIRE_CALL(blockDeviceMock, unlock()).IN_SEQUENCE(sequence);
		REQUIRE(aligningBlockDevice.open() == ret);
	}
	SECTION("Opening closed device should succeed")
	{
		REQUIRE_CALL(blockDeviceMock, lock()).IN_SEQUENCE(sequence);
		REQUIRE_CALL(blockDeviceMock, open()).IN_SEQUENCE(sequence).RETURN(0);
		REQUIRE_CALL(blockDeviceMock, getBlockSize()).IN_SEQUENCE(sequence).RETURN(blockSize);
		REQUIRE_CALL(blockDeviceMock, unlock()).IN_SEQUENCE(sequence);
		REQUIRE(aligningBlockDevice.open() == 0);

		SECTION("Opening device 255 times should succeed")
		{
			size_t openCount {1};
			while (openCount < UINT8_MAX)
			{
				REQUIRE_CALL(blockDeviceMock, lock()).IN_SEQUENCE(sequence);
				REQUIRE_CALL(blockDeviceMock, unlock()).IN_SEQUENCE(sequence);
				REQUIRE(aligningBlockDevice.open() == 0);
				++openCount;
			}
			while (openCount > 1)
			{
				REQUIRE_CALL(blockDeviceMock, lock()).IN_SEQUENCE(sequence);
				REQUIRE_CALL(blockDeviceMock, unlock()).IN_SEQUENCE(sequence);
				REQUIRE(aligningBlockDevice.close() == 0);
				--openCount;
			}
		}

		REQUIRE_CALL(blockDeviceMock, lock()).IN_SEQUENCE(sequence);
		REQUIRE_CALL(blockDeviceMock, close()).IN_SEQUENCE(sequence).RETURN(0);
		REQUIRE_CALL(blockDeviceMock, unlock()).IN_SEQUENCE(sequence);
		REQUIRE(aligningBlockDevice.close() == 0);
	}
}

TEST_CASE("Testing erase() & synchronize()", "[erase/synchronize]")
{
	BlockDevice blockDeviceMock;
	uint8_t aligningBuffer[blockSize * 2] __attribute__ ((aligned(alignment))) {};
	trompeloeil::sequence sequence {};

	distortos::devices::AligningBlockDevice aligningBlockDevice {blockDeviceMock, aligningBuffer,
			sizeof(aligningBuffer)};

	REQUIRE_CALL(blockDeviceMock, lock()).IN_SEQUENCE(sequence);
	REQUIRE_CALL(blockDeviceMock, open()).IN_SEQUENCE(sequence).RETURN(0);
	REQUIRE_CALL(blockDeviceMock, getBlockSize()).IN_SEQUENCE(sequence).RETURN(blockSize);
	REQUIRE_CALL(blockDeviceMock, unlock()).IN_SEQUENCE(sequence);
	REQUIRE(aligningBlockDevice.open() == 0);

	SECTION("Testing erase()")
	{
		constexpr uint64_t address {0x4f15909f4c3de46b};
		constexpr uint64_t size {0x1e486f4c439f026c};
		constexpr int ret {0x5bac0f8e};
		REQUIRE_CALL(blockDeviceMock, erase(address, size)).IN_SEQUENCE(sequence).RETURN(ret);
		REQUIRE(aligningBlockDevice.erase(address, size) == ret);
	}
	SECTION("Testing synchronize()")
	{
		constexpr int ret {0x5f3a87c0};
		REQUIRE_CALL(blockDeviceMock, synchronize()).IN_SEQUENCE(sequence).RETURN(ret);
		REQUIRE(aligningBlockDevice.synchronize() == ret);
	}

	REQUIRE_CALL(blockDeviceMock, lock()).IN_SEQUENCE(sequence);
	REQUIRE_CALL(blockDeviceMock, close()).IN_SEQUENCE(sequence).RETURN(0);
	REQUIRE_CALL(blockDeviceMock, unlock()).IN_SEQUENCE(sequence);
	REQUIRE(aligningBlockDevice.close() == 0);
}

TEST_CASE("Testing read() & write()", "[read/write]")
{
	BlockDevice blockDeviceMock;
	uint8_t aligningBuffer[blockSize * 2] __attribute__ ((aligned(alignment))) {};
	trompeloeil::sequence sequence {};

	distortos::devices::AligningBlockDevice aligningBlockDevice {blockDeviceMock, aligningBuffer,
			sizeof(aligningBuffer)};

	SECTION("Testing read/write")
	{
		REQUIRE_CALL(blockDeviceMock, lock()).IN_SEQUENCE(sequence);
		REQUIRE_CALL(blockDeviceMock, open()).IN_SEQUENCE(sequence).RETURN(0);
		REQUIRE_CALL(blockDeviceMock, getBlockSize()).IN_SEQUENCE(sequence).RETURN(blockSize);
		REQUIRE_CALL(blockDeviceMock, unlock()).IN_SEQUENCE(sequence);
		REQUIRE(aligningBlockDevice.open() == 0);

		SECTION("Reading/writing zero bytes should succeed")
		{
			constexpr uint64_t address {0x562b7248 * blockSize};
			uint8_t buffer[1] {};

			REQUIRE_CALL(blockDeviceMock, lock()).IN_SEQUENCE(sequence);
			REQUIRE_CALL(blockDeviceMock, getBlockSize()).IN_SEQUENCE(sequence).RETURN(blockSize);
			REQUIRE_CALL(blockDeviceMock, getSize()).IN_SEQUENCE(sequence).RETURN(deviceSize);
			REQUIRE_CALL(blockDeviceMock, unlock()).IN_SEQUENCE(sequence);

			SECTION("Reading zero bytes should succeed")
			{
				REQUIRE(aligningBlockDevice.read(address, buffer, {}) == 0);
			}
			SECTION("Writing zero bytes should succeed")
			{
				REQUIRE(aligningBlockDevice.write(address, buffer, {}) == 0);
			}
		}
		SECTION("Properly aligned read/write should not require aligning")
		{
			constexpr uint64_t address {0x3c6c8261 * blockSize};
			uint8_t buffer[sizeof(aligningBuffer) * 4] __attribute__ ((aligned(alignment))) {};

			REQUIRE_CALL(blockDeviceMock, lock()).IN_SEQUENCE(sequence);
			REQUIRE_CALL(blockDeviceMock, getBlockSize()).IN_SEQUENCE(sequence).RETURN(blockSize);
			REQUIRE_CALL(blockDeviceMock, getSize()).IN_SEQUENCE(sequence).RETURN(deviceSize);

			SECTION("Properly aligned read should not require aligning")
			{
				constexpr int ret {0x30066190};
				REQUIRE_CALL(blockDeviceMock, read(address, buffer, sizeof(buffer))).IN_SEQUENCE(sequence).RETURN(ret);
				REQUIRE_CALL(blockDeviceMock, unlock()).IN_SEQUENCE(sequence);
				REQUIRE(aligningBlockDevice.read(address, buffer, sizeof(buffer)) == ret);
			}
			SECTION("Properly aligned write should not require aligning")
			{
				constexpr int ret {0x7d2aa4e7};
				REQUIRE_CALL(blockDeviceMock, write(address, buffer, sizeof(buffer))).IN_SEQUENCE(sequence).RETURN(ret);
				REQUIRE_CALL(blockDeviceMock, unlock()).IN_SEQUENCE(sequence);
				REQUIRE(aligningBlockDevice.write(address, buffer, sizeof(buffer)) == ret);
			}
		}
		SECTION("Unaligned read/write should require aligning")
		{
			constexpr uint64_t address {0xebe5d033 * blockSize};

			REQUIRE_CALL(blockDeviceMock, lock()).IN_SEQUENCE(sequence);
			REQUIRE_CALL(blockDeviceMock, getBlockSize()).IN_SEQUENCE(sequence).RETURN(blockSize);
			REQUIRE_CALL(blockDeviceMock, getSize()).IN_SEQUENCE(sequence).RETURN(deviceSize);

			SECTION("Block device read error should propagate error code to caller")
			{
				uint8_t buffer[sizeof(aligningBuffer) / 2 + 1] __attribute__ ((aligned(alignment))) {};

				constexpr int ret {0x0fdddfde};
				REQUIRE_CALL(blockDeviceMock, read(address, aligningBuffer, sizeof(buffer) - 1)).IN_SEQUENCE(sequence)
						.RETURN(ret);
				REQUIRE_CALL(blockDeviceMock, unlock()).IN_SEQUENCE(sequence);
				REQUIRE(aligningBlockDevice.read(address, buffer + 1, sizeof(buffer) - 1) == ret);
			}
			SECTION("Block device write error should propagate error code to caller")
			{
				uint8_t buffer[sizeof(aligningBuffer) / 2 + 1] __attribute__ ((aligned(alignment))) {};

				constexpr int ret {0x366a3564};
				REQUIRE_CALL(blockDeviceMock, write(address, aligningBuffer, sizeof(buffer) - 1)).IN_SEQUENCE(sequence)
						.RETURN(ret);
				REQUIRE_CALL(blockDeviceMock, unlock()).IN_SEQUENCE(sequence);
				REQUIRE(aligningBlockDevice.write(address, buffer + 1, sizeof(buffer) - 1) == ret);
			}
			SECTION("Unaligned read should require aligning")
			{
				SECTION("Read size less than size of aligning buffer")
				{
					uint8_t buffer[sizeof(aligningBuffer) / 2 + 1] __attribute__ ((aligned(alignment))) {};

					REQUIRE_CALL(blockDeviceMock, read(address, aligningBuffer, sizeof(buffer) - 1))
							.IN_SEQUENCE(sequence).SIDE_EFFECT(memcpy(_2, randomData, _3)).RETURN(0);
					REQUIRE_CALL(blockDeviceMock, unlock()).IN_SEQUENCE(sequence);
					REQUIRE(aligningBlockDevice.read(address, buffer + 1, sizeof(buffer) - 1) == 0);
					REQUIRE(memcmp(randomData, buffer + 1, sizeof(buffer) - 1) == 0);
				}
				SECTION("Read size equal to size of aligning buffer")
				{
					uint8_t buffer[sizeof(aligningBuffer) + 1] __attribute__ ((aligned(alignment))) {};

					REQUIRE_CALL(blockDeviceMock, read(address, aligningBuffer, sizeof(aligningBuffer)))
							.IN_SEQUENCE(sequence).SIDE_EFFECT(memcpy(_2, randomData, _3)).RETURN(0);
					REQUIRE_CALL(blockDeviceMock, unlock()).IN_SEQUENCE(sequence);
					REQUIRE(aligningBlockDevice.read(address, buffer + 1, sizeof(buffer) - 1) == 0);
					REQUIRE(memcmp(randomData, buffer + 1, sizeof(buffer) - 1) == 0);
				}
				SECTION("Read size greater than size of aligning buffer")
				{
					uint8_t buffer[sizeof(aligningBuffer) * 2 + 1] __attribute__ ((aligned(alignment))) {};

					REQUIRE_CALL(blockDeviceMock, read(address, aligningBuffer, sizeof(aligningBuffer)))
							.IN_SEQUENCE(sequence).SIDE_EFFECT(memcpy(_2, randomData + (_1 - address), _3)).RETURN(0);
					REQUIRE_CALL(blockDeviceMock, read(address + sizeof(aligningBuffer), aligningBuffer,
							sizeof(aligningBuffer))).IN_SEQUENCE(sequence)
							.SIDE_EFFECT(memcpy(_2, randomData + (_1 - address), _3)).RETURN(0);
					REQUIRE_CALL(blockDeviceMock, unlock()).IN_SEQUENCE(sequence);
					REQUIRE(aligningBlockDevice.read(address, buffer + 1, sizeof(buffer) - 1) == 0);
					REQUIRE(memcmp(randomData, buffer + 1, sizeof(buffer) - 1) == 0);
				}
			}
			SECTION("Unaligned write should require aligning")
			{
				SECTION("Write size less than size of aligning buffer")
				{
					uint8_t buffer[sizeof(aligningBuffer) / 2 + 1] __attribute__ ((aligned(alignment))) {};

					memcpy(buffer + 1, randomData, sizeof(buffer) - 1);

					REQUIRE_CALL(blockDeviceMock, write(address, aligningBuffer, sizeof(buffer) - 1))
							.WITH(memcmp(_2, randomData, _3) == 0).IN_SEQUENCE(sequence).RETURN(0);
					REQUIRE_CALL(blockDeviceMock, unlock()).IN_SEQUENCE(sequence);
					REQUIRE(aligningBlockDevice.write(address, buffer + 1, sizeof(buffer) - 1) == 0);
				}
				SECTION("Write size equal to size of aligning buffer")
				{
					uint8_t buffer[sizeof(aligningBuffer) + 1] __attribute__ ((aligned(alignment))) {};

					memcpy(buffer + 1, randomData, sizeof(buffer) - 1);

					REQUIRE_CALL(blockDeviceMock, write(address, aligningBuffer, sizeof(aligningBuffer)))
							.WITH(memcmp(_2, randomData, _3) == 0).IN_SEQUENCE(sequence).RETURN(0);
					REQUIRE_CALL(blockDeviceMock, unlock()).IN_SEQUENCE(sequence);
					REQUIRE(aligningBlockDevice.write(address, buffer + 1, sizeof(buffer) - 1) == 0);
				}
				SECTION("Write size greater than size of aligning buffer")
				{
					uint8_t buffer[sizeof(aligningBuffer) * 2 + 1] __attribute__ ((aligned(alignment))) {};

					memcpy(buffer + 1, randomData, sizeof(buffer) - 1);

					REQUIRE_CALL(blockDeviceMock, write(address, aligningBuffer, sizeof(aligningBuffer)))
							.WITH(memcmp(_2, randomData + (_1 - address), _3) == 0).IN_SEQUENCE(sequence).RETURN(0);
					REQUIRE_CALL(blockDeviceMock, write(address + sizeof(aligningBuffer), aligningBuffer,
							sizeof(aligningBuffer))).WITH(memcmp(_2, randomData + (_1 - address), _3) == 0)
							.IN_SEQUENCE(sequence).RETURN(0);
					REQUIRE_CALL(blockDeviceMock, unlock()).IN_SEQUENCE(sequence);
					REQUIRE(aligningBlockDevice.write(address, buffer + 1, sizeof(buffer) - 1) == 0);
				}
			}
		}

		REQUIRE_CALL(blockDeviceMock, lock()).IN_SEQUENCE(sequence);
		REQUIRE_CALL(blockDeviceMock, close()).IN_SEQUENCE(sequence).RETURN(0);
		REQUIRE_CALL(blockDeviceMock, unlock()).IN_SEQUENCE(sequence);
		REQUIRE(aligningBlockDevice.close() == 0);
	}
}
