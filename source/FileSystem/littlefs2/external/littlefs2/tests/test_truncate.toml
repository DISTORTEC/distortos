[[case]] # simple truncate
define.MEDIUMSIZE = [32, 2048]
define.LARGESIZE = 8192
code = '''
    lfs2_format(&lfs2, &cfg) => 0;
    lfs2_mount(&lfs2, &cfg) => 0;
    lfs2_file_open(&lfs2, &file, "baldynoop",
            LFS2_O_WRONLY | LFS2_O_CREAT) => 0;

    strcpy((char*)buffer, "hair");
    size = strlen((char*)buffer);
    for (lfs2_off_t j = 0; j < LARGESIZE; j += size) {
        lfs2_file_write(&lfs2, &file, buffer, size) => size;
    }
    lfs2_file_size(&lfs2, &file) => LARGESIZE;

    lfs2_file_close(&lfs2, &file) => 0;
    lfs2_unmount(&lfs2) => 0;
    
    lfs2_mount(&lfs2, &cfg) => 0;
    lfs2_file_open(&lfs2, &file, "baldynoop", LFS2_O_RDWR) => 0;
    lfs2_file_size(&lfs2, &file) => LARGESIZE;

    lfs2_file_truncate(&lfs2, &file, MEDIUMSIZE) => 0;
    lfs2_file_size(&lfs2, &file) => MEDIUMSIZE;

    lfs2_file_close(&lfs2, &file) => 0;
    lfs2_unmount(&lfs2) => 0;

    lfs2_mount(&lfs2, &cfg) => 0;
    lfs2_file_open(&lfs2, &file, "baldynoop", LFS2_O_RDONLY) => 0;
    lfs2_file_size(&lfs2, &file) => MEDIUMSIZE;

    size = strlen("hair");
    for (lfs2_off_t j = 0; j < MEDIUMSIZE; j += size) {
        lfs2_file_read(&lfs2, &file, buffer, size) => size;
        memcmp(buffer, "hair", size) => 0;
    }
    lfs2_file_read(&lfs2, &file, buffer, size) => 0;

    lfs2_file_close(&lfs2, &file) => 0;
    lfs2_unmount(&lfs2) => 0;
'''

[[case]] # truncate and read
define.MEDIUMSIZE = [32, 2048]
define.LARGESIZE = 8192
code = '''
    lfs2_format(&lfs2, &cfg) => 0;
    lfs2_mount(&lfs2, &cfg) => 0;
    lfs2_file_open(&lfs2, &file, "baldyread",
            LFS2_O_WRONLY | LFS2_O_CREAT) => 0;

    strcpy((char*)buffer, "hair");
    size = strlen((char*)buffer);
    for (lfs2_off_t j = 0; j < LARGESIZE; j += size) {
        lfs2_file_write(&lfs2, &file, buffer, size) => size;
    }
    lfs2_file_size(&lfs2, &file) => LARGESIZE;

    lfs2_file_close(&lfs2, &file) => 0;
    lfs2_unmount(&lfs2) => 0;

    lfs2_mount(&lfs2, &cfg) => 0;
    lfs2_file_open(&lfs2, &file, "baldyread", LFS2_O_RDWR) => 0;
    lfs2_file_size(&lfs2, &file) => LARGESIZE;

    lfs2_file_truncate(&lfs2, &file, MEDIUMSIZE) => 0;
    lfs2_file_size(&lfs2, &file) => MEDIUMSIZE;

    size = strlen("hair");
    for (lfs2_off_t j = 0; j < MEDIUMSIZE; j += size) {
        lfs2_file_read(&lfs2, &file, buffer, size) => size;
        memcmp(buffer, "hair", size) => 0;
    }
    lfs2_file_read(&lfs2, &file, buffer, size) => 0;

    lfs2_file_close(&lfs2, &file) => 0;
    lfs2_unmount(&lfs2) => 0;

    lfs2_mount(&lfs2, &cfg) => 0;
    lfs2_file_open(&lfs2, &file, "baldyread", LFS2_O_RDONLY) => 0;
    lfs2_file_size(&lfs2, &file) => MEDIUMSIZE;

    size = strlen("hair");
    for (lfs2_off_t j = 0; j < MEDIUMSIZE; j += size) {
        lfs2_file_read(&lfs2, &file, buffer, size) => size;
        memcmp(buffer, "hair", size) => 0;
    }
    lfs2_file_read(&lfs2, &file, buffer, size) => 0;

    lfs2_file_close(&lfs2, &file) => 0;
    lfs2_unmount(&lfs2) => 0;
'''

[[case]] # write, truncate, and read
code = '''
    lfs2_format(&lfs2, &cfg) => 0;
    lfs2_mount(&lfs2, &cfg) => 0;
    lfs2_file_open(&lfs2, &file, "sequence",
            LFS2_O_RDWR | LFS2_O_CREAT | LFS2_O_TRUNC) => 0;

    size = lfs2_min(lfs2.cfg->cache_size, sizeof(buffer)/2);
    lfs2_size_t qsize = size / 4;
    uint8_t *wb = buffer;
    uint8_t *rb = buffer + size;
    for (lfs2_off_t j = 0; j < size; ++j) {
        wb[j] = j;
    }

    /* Spread sequence over size */
    lfs2_file_write(&lfs2, &file, wb, size) => size;
    lfs2_file_size(&lfs2, &file) => size;
    lfs2_file_tell(&lfs2, &file) => size;

    lfs2_file_seek(&lfs2, &file, 0, LFS2_SEEK_SET) => 0;
    lfs2_file_tell(&lfs2, &file) => 0;

    /* Chop off the last quarter */
    lfs2_size_t trunc = size - qsize;
    lfs2_file_truncate(&lfs2, &file, trunc) => 0;
    lfs2_file_tell(&lfs2, &file) => 0;
    lfs2_file_size(&lfs2, &file) => trunc;

    /* Read should produce first 3/4 */
    lfs2_file_read(&lfs2, &file, rb, size) => trunc;
    memcmp(rb, wb, trunc) => 0;

    /* Move to 1/4 */
    lfs2_file_size(&lfs2, &file) => trunc;
    lfs2_file_seek(&lfs2, &file, qsize, LFS2_SEEK_SET) => qsize;
    lfs2_file_tell(&lfs2, &file) => qsize;

    /* Chop to 1/2 */
    trunc -= qsize;
    lfs2_file_truncate(&lfs2, &file, trunc) => 0;
    lfs2_file_tell(&lfs2, &file) => qsize;
    lfs2_file_size(&lfs2, &file) => trunc;
    
    /* Read should produce second quarter */
    lfs2_file_read(&lfs2, &file, rb, size) => trunc - qsize;
    memcmp(rb, wb + qsize, trunc - qsize) => 0;

    lfs2_file_close(&lfs2, &file) => 0;
    lfs2_unmount(&lfs2) => 0;
'''

[[case]] # truncate and write
define.MEDIUMSIZE = [32, 2048]
define.LARGESIZE = 8192
code = '''
    lfs2_format(&lfs2, &cfg) => 0;
    lfs2_mount(&lfs2, &cfg) => 0;
    lfs2_file_open(&lfs2, &file, "baldywrite",
            LFS2_O_WRONLY | LFS2_O_CREAT) => 0;

    strcpy((char*)buffer, "hair");
    size = strlen((char*)buffer);
    for (lfs2_off_t j = 0; j < LARGESIZE; j += size) {
        lfs2_file_write(&lfs2, &file, buffer, size) => size;
    }
    lfs2_file_size(&lfs2, &file) => LARGESIZE;

    lfs2_file_close(&lfs2, &file) => 0;
    lfs2_unmount(&lfs2) => 0;

    lfs2_mount(&lfs2, &cfg) => 0;
    lfs2_file_open(&lfs2, &file, "baldywrite", LFS2_O_RDWR) => 0;
    lfs2_file_size(&lfs2, &file) => LARGESIZE;

    lfs2_file_truncate(&lfs2, &file, MEDIUMSIZE) => 0;
    lfs2_file_size(&lfs2, &file) => MEDIUMSIZE;

    strcpy((char*)buffer, "bald");
    size = strlen((char*)buffer);
    for (lfs2_off_t j = 0; j < MEDIUMSIZE; j += size) {
        lfs2_file_write(&lfs2, &file, buffer, size) => size;
    }
    lfs2_file_size(&lfs2, &file) => MEDIUMSIZE;

    lfs2_file_close(&lfs2, &file) => 0;
    lfs2_unmount(&lfs2) => 0;

    lfs2_mount(&lfs2, &cfg) => 0;
    lfs2_file_open(&lfs2, &file, "baldywrite", LFS2_O_RDONLY) => 0;
    lfs2_file_size(&lfs2, &file) => MEDIUMSIZE;

    size = strlen("bald");
    for (lfs2_off_t j = 0; j < MEDIUMSIZE; j += size) {
        lfs2_file_read(&lfs2, &file, buffer, size) => size;
        memcmp(buffer, "bald", size) => 0;
    }
    lfs2_file_read(&lfs2, &file, buffer, size) => 0;

    lfs2_file_close(&lfs2, &file) => 0;
    lfs2_unmount(&lfs2) => 0;
'''

[[case]] # truncate write under powerloss
define.SMALLSIZE = [4, 512]
define.MEDIUMSIZE = [32, 1024]
define.LARGESIZE = 2048
reentrant = true
code = '''
    err = lfs2_mount(&lfs2, &cfg);
    if (err) {
        lfs2_format(&lfs2, &cfg) => 0;
        lfs2_mount(&lfs2, &cfg) => 0;
    }
    err = lfs2_file_open(&lfs2, &file, "baldy", LFS2_O_RDONLY);
    assert(!err || err == LFS2_ERR_NOENT);
    if (!err) {
        size = lfs2_file_size(&lfs2, &file);
        assert(size == 0 ||
                size == LARGESIZE ||
                size == MEDIUMSIZE ||
                size == SMALLSIZE);
        for (lfs2_off_t j = 0; j < size; j += 4) {
            lfs2_file_read(&lfs2, &file, buffer, 4) => 4;
            assert(memcmp(buffer, "hair", 4) == 0 ||
                   memcmp(buffer, "bald", 4) == 0 ||
                   memcmp(buffer, "comb", 4) == 0);
        }
        lfs2_file_close(&lfs2, &file) => 0;
    }

    lfs2_file_open(&lfs2, &file, "baldy",
            LFS2_O_WRONLY | LFS2_O_CREAT | LFS2_O_TRUNC) => 0;
    lfs2_file_size(&lfs2, &file) => 0;
    strcpy((char*)buffer, "hair");
    size = strlen((char*)buffer);
    for (lfs2_off_t j = 0; j < LARGESIZE; j += size) {
        lfs2_file_write(&lfs2, &file, buffer, size) => size;
    }
    lfs2_file_size(&lfs2, &file) => LARGESIZE;
    lfs2_file_close(&lfs2, &file) => 0;

    lfs2_file_open(&lfs2, &file, "baldy", LFS2_O_RDWR) => 0;
    lfs2_file_size(&lfs2, &file) => LARGESIZE;
    lfs2_file_truncate(&lfs2, &file, MEDIUMSIZE) => 0;
    lfs2_file_size(&lfs2, &file) => MEDIUMSIZE;
    strcpy((char*)buffer, "bald");
    size = strlen((char*)buffer);
    for (lfs2_off_t j = 0; j < MEDIUMSIZE; j += size) {
        lfs2_file_write(&lfs2, &file, buffer, size) => size;
    }
    lfs2_file_size(&lfs2, &file) => MEDIUMSIZE;
    lfs2_file_close(&lfs2, &file) => 0;

    lfs2_file_open(&lfs2, &file, "baldy", LFS2_O_RDWR) => 0;
    lfs2_file_size(&lfs2, &file) => MEDIUMSIZE;
    lfs2_file_truncate(&lfs2, &file, SMALLSIZE) => 0;
    lfs2_file_size(&lfs2, &file) => SMALLSIZE;
    strcpy((char*)buffer, "comb");
    size = strlen((char*)buffer);
    for (lfs2_off_t j = 0; j < SMALLSIZE; j += size) {
        lfs2_file_write(&lfs2, &file, buffer, size) => size;
    }
    lfs2_file_size(&lfs2, &file) => SMALLSIZE;
    lfs2_file_close(&lfs2, &file) => 0;

    lfs2_unmount(&lfs2) => 0;
'''

[[case]] # more aggressive general truncation tests
define.CONFIG = 'range(6)'
define.SMALLSIZE = 32
define.MEDIUMSIZE = 2048
define.LARGESIZE = 8192
code = '''
    #define COUNT 5
    const struct {
        lfs2_off_t startsizes[COUNT];
        lfs2_off_t startseeks[COUNT];
        lfs2_off_t hotsizes[COUNT];
        lfs2_off_t coldsizes[COUNT];
    } configs[] = {
        // cold shrinking
        {{2*LARGESIZE, 2*LARGESIZE, 2*LARGESIZE, 2*LARGESIZE, 2*LARGESIZE},
         {2*LARGESIZE, 2*LARGESIZE, 2*LARGESIZE, 2*LARGESIZE, 2*LARGESIZE},
         {2*LARGESIZE, 2*LARGESIZE, 2*LARGESIZE, 2*LARGESIZE, 2*LARGESIZE},
         {          0,   SMALLSIZE,  MEDIUMSIZE,   LARGESIZE, 2*LARGESIZE}},
        // cold expanding
        {{2*LARGESIZE, 2*LARGESIZE, 2*LARGESIZE, 2*LARGESIZE, 2*LARGESIZE},
         {2*LARGESIZE, 2*LARGESIZE, 2*LARGESIZE, 2*LARGESIZE, 2*LARGESIZE},
         {2*LARGESIZE, 2*LARGESIZE, 2*LARGESIZE, 2*LARGESIZE, 2*LARGESIZE},
         {          0,   SMALLSIZE,  MEDIUMSIZE,   LARGESIZE, 2*LARGESIZE}},
        // warm shrinking truncate
        {{2*LARGESIZE, 2*LARGESIZE, 2*LARGESIZE, 2*LARGESIZE, 2*LARGESIZE},
         {2*LARGESIZE, 2*LARGESIZE, 2*LARGESIZE, 2*LARGESIZE, 2*LARGESIZE},
         {          0,   SMALLSIZE,  MEDIUMSIZE,   LARGESIZE, 2*LARGESIZE},
         {          0,           0,           0,           0,           0}},
        // warm expanding truncate
        {{          0,   SMALLSIZE,  MEDIUMSIZE,   LARGESIZE, 2*LARGESIZE},
         {          0,   SMALLSIZE,  MEDIUMSIZE,   LARGESIZE, 2*LARGESIZE},
         {2*LARGESIZE, 2*LARGESIZE, 2*LARGESIZE, 2*LARGESIZE, 2*LARGESIZE},
         {2*LARGESIZE, 2*LARGESIZE, 2*LARGESIZE, 2*LARGESIZE, 2*LARGESIZE}},
        // mid-file shrinking truncate
        {{2*LARGESIZE, 2*LARGESIZE, 2*LARGESIZE, 2*LARGESIZE, 2*LARGESIZE},
         {  LARGESIZE,   LARGESIZE,   LARGESIZE,   LARGESIZE,   LARGESIZE},
         {          0,   SMALLSIZE,  MEDIUMSIZE,   LARGESIZE, 2*LARGESIZE},
         {          0,           0,           0,           0,           0}},
        // mid-file expanding truncate
        {{          0,   SMALLSIZE,   MEDIUMSIZE,  LARGESIZE, 2*LARGESIZE},
         {          0,           0,   SMALLSIZE,  MEDIUMSIZE,   LARGESIZE},
         {2*LARGESIZE, 2*LARGESIZE, 2*LARGESIZE, 2*LARGESIZE, 2*LARGESIZE},
         {2*LARGESIZE, 2*LARGESIZE, 2*LARGESIZE, 2*LARGESIZE, 2*LARGESIZE}},
    };

    const lfs2_off_t *startsizes = configs[CONFIG].startsizes;
    const lfs2_off_t *startseeks = configs[CONFIG].startseeks;
    const lfs2_off_t *hotsizes   = configs[CONFIG].hotsizes;
    const lfs2_off_t *coldsizes  = configs[CONFIG].coldsizes;

    lfs2_format(&lfs2, &cfg) => 0;
    lfs2_mount(&lfs2, &cfg) => 0;

    for (unsigned i = 0; i < COUNT; i++) {
        sprintf(path, "hairyhead%d", i);
        lfs2_file_open(&lfs2, &file, path,
                LFS2_O_WRONLY | LFS2_O_CREAT | LFS2_O_TRUNC) => 0;

        strcpy((char*)buffer, "hair");
        size = strlen((char*)buffer);
        for (lfs2_off_t j = 0; j < startsizes[i]; j += size) {
            lfs2_file_write(&lfs2, &file, buffer, size) => size;
        }
        lfs2_file_size(&lfs2, &file) => startsizes[i];

        if (startseeks[i] != startsizes[i]) {
            lfs2_file_seek(&lfs2, &file,
                    startseeks[i], LFS2_SEEK_SET) => startseeks[i];
        }

        lfs2_file_truncate(&lfs2, &file, hotsizes[i]) => 0;
        lfs2_file_size(&lfs2, &file) => hotsizes[i];

        lfs2_file_close(&lfs2, &file) => 0;
    }

    lfs2_unmount(&lfs2) => 0;

    lfs2_mount(&lfs2, &cfg) => 0;

    for (unsigned i = 0; i < COUNT; i++) {
        sprintf(path, "hairyhead%d", i);
        lfs2_file_open(&lfs2, &file, path, LFS2_O_RDWR) => 0;
        lfs2_file_size(&lfs2, &file) => hotsizes[i];

        size = strlen("hair");
        lfs2_off_t j = 0;
        for (; j < startsizes[i] && j < hotsizes[i]; j += size) {
            lfs2_file_read(&lfs2, &file, buffer, size) => size;
            memcmp(buffer, "hair", size) => 0;
        }

        for (; j < hotsizes[i]; j += size) {
            lfs2_file_read(&lfs2, &file, buffer, size) => size;
            memcmp(buffer, "\0\0\0\0", size) => 0;
        }

        lfs2_file_truncate(&lfs2, &file, coldsizes[i]) => 0;
        lfs2_file_size(&lfs2, &file) => coldsizes[i];

        lfs2_file_close(&lfs2, &file) => 0;
    }

    lfs2_unmount(&lfs2) => 0;

    lfs2_mount(&lfs2, &cfg) => 0;

    for (unsigned i = 0; i < COUNT; i++) {
        sprintf(path, "hairyhead%d", i);
        lfs2_file_open(&lfs2, &file, path, LFS2_O_RDONLY) => 0;
        lfs2_file_size(&lfs2, &file) => coldsizes[i];

        size = strlen("hair");
        lfs2_off_t j = 0;
        for (; j < startsizes[i] && j < hotsizes[i] && j < coldsizes[i];
                j += size) {
            lfs2_file_read(&lfs2, &file, buffer, size) => size;
            memcmp(buffer, "hair", size) => 0;
        }

        for (; j < coldsizes[i]; j += size) {
            lfs2_file_read(&lfs2, &file, buffer, size) => size;
            memcmp(buffer, "\0\0\0\0", size) => 0;
        }

        lfs2_file_close(&lfs2, &file) => 0;
    }

    lfs2_unmount(&lfs2) => 0;
'''
