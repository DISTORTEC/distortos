{% set chip = dictionary['chip']['compatible'][0].rpartition(',')[2] %}
#
# file: {{ metadata[metadataIndex][2] }}
#
# author: Copyright (C) 2018-2019 Kamil Szczygiel http://www.distortec.com http://www.freddiechopin.info
#
# This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0. If a copy of the MPL was not
# distributed with this file, You can obtain one at http://mozilla.org/MPL/2.0/.
#
# Automatically generated file - do not edit!
#

distortosSetFixedConfiguration(BOOLEAN
		DISTORTOS_CHIP_{{ chip[:-6] }}
		ON)

distortosSetFixedConfiguration(BOOLEAN
		DISTORTOS_CHIP_{{ chip[:-4] }}
		ON)

distortosSetFixedConfiguration(BOOLEAN
		DISTORTOS_CHIP_{{ chip[:-3] }}
		ON)

distortosSetFixedConfiguration(BOOLEAN
		DISTORTOS_CHIP_{{ chip[:-2] }}
		ON)

distortosSetFixedConfiguration(BOOLEAN
		DISTORTOS_CHIP_{{ chip[:-1] }}
		ON)

distortosSetFixedConfiguration(BOOLEAN
		DISTORTOS_CHIP_{{ chip }}
		ON)

distortosSetFixedConfiguration(STRING
		DISTORTOS_CHIP
		"{{ chip }}")
{% if 'VDD' in dictionary['chip'] %}

distortosSetFixedConfiguration(INTEGER
		DISTORTOS_CHIP_VDD_MV
		{{ (dictionary['chip']['VDD']['output-voltage'] * 1000) | int }})
{% endif %}
{% if 'clocks' in dictionary %}
{% for key, clock in dictionary['clocks'].items() if 'ST,STM32-HSE' in clock['compatible'] %}
{% if clock['frequency'] != 0 or clock.get('bypass', False) == True %}

distortosSetFixedConfiguration(BOOLEAN
		DISTORTOS_CHIP_RCC_HSE_CLOCK_BYPASS
{{ '\t\t' }}{% if clock.get('bypass', False) == True %}ON{% else %}OFF{% endif %})
{% endif %}
{% if clock['frequency'] != 0 %}

distortosSetFixedConfiguration(INTEGER
		DISTORTOS_CHIP_RCC_HSE_FREQUENCY
		{{ clock['frequency'] }})
{% endif %}
{% endfor %}
{% endif %}

{% set chipFamily = dictionary['chip']['compatible'][1].rpartition(',')[2] %}
include("${CMAKE_CURRENT_SOURCE_DIR}/source/chip/STM32/{{ chipFamily }}/distortos-sources.cmake")
