#
# file: {{ metadata[metadataIndex][2] }}
#
# author: Copyright (C) 2018-2019 Kamil Szczygiel http://www.distortec.com http://www.freddiechopin.info
#
# This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0. If a copy of the MPL was not
# distributed with this file, You can obtain one at http://mozilla.org/MPL/2.0/.
#
# Automatically generated file - do not edit!
#
{% for key, spi in dictionary['SPIs'].items() if spi is mapping and 'ST,STM32-SPI-v2' in spi['compatible'] %}

distortosSetConfiguration(BOOLEAN
		distortos_Peripherals_{{ key }}
		OFF
		HELP "Enable {{ key }} low-level driver."
		OUTPUT_NAME DISTORTOS_CHIP_{{ key | upper }}_ENABLE)

if(distortos_Peripherals_{{ key }})

	distortosSetConfiguration(BOOLEAN
			distortos_Peripherals_{{ key }}_00_Use_DMA
			ON
			HELP "Select whether {{ key }} low-level driver uses DMA (true) or interrupts (false) for transfers."
			OUTPUT_NAME DISTORTOS_CHIP_{{ key | upper }}_DMA_BASED)

	if(distortos_Peripherals_{{ key }}_00_Use_DMA)

		distortosSetConfiguration(STRING
				distortos_Peripherals_{{ key }}_01_RX_DMA
{% for rxDma in spi['RX-DMA'] %}
				"{{ rxDma['controller']['$path'][-1] }} channel {{ rxDma['channel'] }} (request {{ rxDma['request'] }})"
{% endfor %}
				HELP "Select RX DMA channel used by {{ key }} low-level driver."
				NO_OUTPUT)

		string(REGEX MATCH
				"DMA([0-9]+) channel ([0-9]+) \\(request ([0-9]+)\\)"
				dummy
				"${distortos_Peripherals_{{ key }}_01_RX_DMA}")
		distortosSetFixedConfiguration(INTEGER
				DISTORTOS_CHIP_{{ key | upper }}_RX_DMA
				"${CMAKE_MATCH_1}")
		distortosSetFixedConfiguration(INTEGER
				DISTORTOS_CHIP_{{ key | upper }}_RX_DMA_CHANNEL
				"${CMAKE_MATCH_2}")
		distortosSetFixedConfiguration(INTEGER
				DISTORTOS_CHIP_{{ key | upper }}_RX_DMA_REQUEST
				"${CMAKE_MATCH_3}")
		list(APPEND DISTORTOS_CHIP_DMA${CMAKE_MATCH_1}_DEPENDENTS "{{ key }} RX")
		list(APPEND DISTORTOS_CHIP_DMA${CMAKE_MATCH_1}_CHANNEL${CMAKE_MATCH_2}_DEPENDENTS "{{ key }} RX")

		distortosSetConfiguration(STRING
				distortos_Peripherals_{{ key }}_02_TX_DMA
{% for txDma in spi['TX-DMA'] %}
				"{{ txDma['controller']['$path'][-1] }} channel {{ txDma['channel'] }} (request {{ txDma['request'] }})"
{% endfor %}
				HELP "Select TX DMA channel used by {{ key }} low-level driver."
				NO_OUTPUT)

		string(REGEX MATCH
				"DMA([0-9]+) channel ([0-9]+) \\(request ([0-9]+)\\)"
				dummy
				"${distortos_Peripherals_{{ key }}_02_TX_DMA}")
		distortosSetFixedConfiguration(INTEGER
				DISTORTOS_CHIP_{{ key | upper }}_TX_DMA
				"${CMAKE_MATCH_1}")
		distortosSetFixedConfiguration(INTEGER
				DISTORTOS_CHIP_{{ key | upper }}_TX_DMA_CHANNEL
				"${CMAKE_MATCH_2}")
		distortosSetFixedConfiguration(INTEGER
				DISTORTOS_CHIP_{{ key | upper }}_TX_DMA_REQUEST
				"${CMAKE_MATCH_3}")
		list(APPEND DISTORTOS_CHIP_DMA${CMAKE_MATCH_1}_DEPENDENTS "{{ key }} TX")
		list(APPEND DISTORTOS_CHIP_DMA${CMAKE_MATCH_1}_CHANNEL${CMAKE_MATCH_2}_DEPENDENTS "{{ key }} TX")

	else(distortos_Peripherals_{{ key }}_00_Use_DMA)

		set(ARCHITECTURE_NVIC_{{ spi['interrupt']['vector'] | upper }}_ENABLE ON)

	endif(distortos_Peripherals_{{ key }}_00_Use_DMA)

endif(distortos_Peripherals_{{ key }})
{% endfor %}

include("${CMAKE_CURRENT_SOURCE_DIR}/source/chip/STM32/peripherals/SPIv2/distortos-sources.cmake")
